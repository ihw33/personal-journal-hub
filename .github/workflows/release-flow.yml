# .github/workflows/release-flow.yml

name: IWL Release Flow

on:
  pull_request:
    types: [opened]
  push:
    branches:
      - main

jobs:
  # 새로운 PR이 생성되었을 때 실행되는 작업
  notify-slack-on-pr:
    # "on.pull_request" 이벤트일 때만 이 job을 실행합니다.
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Send Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_USERNAME: "IWL-Bot"
          SLACK_ICON_EMOJI: ":robot_face:"
          SLACK_COLOR: "#7C3AED"
          SLACK_TITLE: "📬 New Pull Request Ready for Review!"
          SLACK_MESSAGE: |
            PM님, 새로운 PR이 생성되었습니다. 리뷰를 시작해주세요.
            *PR Link:* ${{ github.event.pull_request.html_url }}

  # main 브랜치에 새로운 코드가 push(merge)되었을 때 실행되는 작업
  create-release-notes:
    # "on.push" 이벤트이고, main 브랜치일 때만 이 job을 실행합니다.
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # 릴리즈 노트 생성을 위해 전체 git 히스토리를 가져옵니다.
          fetch-depth: 0

      - name: Generate Release Notes
        id: release
        uses: release-drafter/release-drafter@v5
        with:
          # 릴리즈 노트를 자동으로 생성하고 GitHub Releases 페이지에 초안을 작성합니다.
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Send Release Slack Notification
        if: steps.release.outputs.tag_name != '' # 새 릴리즈가 생성되었을 때만 실행
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_USERNAME: "IWL-Bot"
          SLACK_ICON_EMOJI: "🎉"
          SLACK_COLOR: "#10B981" # Success Green
          SLACK_TITLE: "🚀 New Release Published: ${{ steps.release.outputs.tag_name }}"
          SLACK_MESSAGE: |
            새로운 버전이 성공적으로 릴리즈되었습니다!
            *Release Notes:* ${{ steps.release.outputs.html_url }}