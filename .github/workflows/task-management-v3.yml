name: Task Management Automation v3

on:
  issues:
    types: [opened, closed, edited, labeled, unlabeled]
  issue_comment:
    types: [created, edited]

jobs:
  update-notion:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.title, '[업무분담]')
    
    steps:
    - name: Update Notion Database
      uses: actions/github-script@v7
      env:
        NOTION_TOKEN: ${{ secrets.NOTION_TOKEN }}
        # 직접 하드코딩으로 정확한 ID 사용
        NOTION_DATABASE_ID: "24b3b64ba46880cdb71aee36f01a1573"
      with:
        script: |
          const issue = context.payload.issue;
          const action = context.payload.action;
          
          console.log(`Processing issue: ${issue.title}`);
          console.log(`Database ID: ${process.env.NOTION_DATABASE_ID}`);
          
          // CLI 이름 추출
          const cliMatch = issue.title.match(/(Gemini CLI|Codex CLI|Claude Code)/);
          const cli = cliMatch ? cliMatch[1] : 'Unknown CLI';
          
          // 상태 결정
          let status = 'pending';
          if (action === 'closed') {
            status = 'completed';
          } else if (issue.assignees && issue.assignees.length > 0) {
            status = 'in_progress';
          }
          
          // Notion 업데이트
          try {
            const fetch = (await import('node-fetch')).default;
            
            const response = await fetch('https://api.notion.com/v1/pages', {
              method: 'POST',
              headers: {
                'Authorization': `Bearer ${process.env.NOTION_TOKEN}`,
                'Content-Type': 'application/json',
                'Notion-Version': '2022-06-28'
              },
              body: JSON.stringify({
                parent: { 
                  database_id: process.env.NOTION_DATABASE_ID 
                },
                properties: {
                  'Task': {
                    title: [{ 
                      text: { 
                        content: issue.title.replace('[업무분담] ', '') 
                      } 
                    }]
                  },
                  'CLI': {
                    select: { name: cli }
                  },
                  'Status': {
                    select: { name: status }
                  },
                  'Timestamp': {
                    date: { 
                      start: new Date().toISOString() 
                    }
                  },
                  'GitHub Issue': {
                    url: issue.html_url
                  }
                }
              })
            });
            
            if (response.ok) {
              console.log('✅ Successfully updated Notion database!');
              const data = await response.json();
              console.log('Created page ID:', data.id);
            } else {
              const error = await response.text();
              console.error('❌ Notion API error:', error);
            }
            
          } catch (error) {
            console.error('❌ Error updating Notion:', error.message);
          }

  notify-assignment:
    runs-on: ubuntu-latest
    if: github.event.action == 'opened' && contains(github.event.issue.title, '[업무분담]')
    
    steps:
    - name: Post Assignment Comment
      uses: actions/github-script@v7
      with:
        script: |
          const issue = context.payload.issue;
          
          const comment = '🎯 **새 업무가 할당되었습니다!**\\n\\n' +
            '업무를 확인하고 진행해주세요. 완료 후 이 Issue에 댓글로 보고해주시면 자동으로 상태가 업데이트됩니다.\\n\\n' +
            '### 📋 빠른 확인\\n' +
            '- Notion 데이터베이스에 자동 기록됨\\n' +
            '- 도움 필요시: 이 Issue에 댓글 작성\\n\\n' +
            '---\\n' +
            '*🤖 자동 알림: Task Management System v3*';
          
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });